{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Buildler.svelte",
    "../src/Griddler.svelte",
    "../src/Block.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport levels from './levels.json';\n\timport _ from 'lodash';\n\timport Griddler from './Griddler.svelte';\n\timport Buildler from './Buildler.svelte';\n\n\tlet currentLevel = 0;\n\n\tlet level = levels[currentLevel];\n\tlet { title, colors } = level;\n\tlet buildMode = false;\n</script>\n\n<style>\n\t.flex {\n\t\tdisplay: flex;\n\t}\n\n\tbutton {\n\t\tbackground: #DCE;\n\t\tborder: 4px;\n\t\tpadding: 0.5rem 1rem;\n\t}\n\n\tbutton.active {\n\t\tborder: 1px solid rgba(0, 0, 0, 0.4);\n\t}\n</style>\n\n<section>\n\t<div class=\"flex\">\n\t\t<button\n\t\t\ton:click={() => buildMode = false}\n\t\t\tclass=\"{!buildMode ? 'active' : ''}\"\n\t\t>\n\t\t\tPlay\n\t\t</button>\n\t\t<button\n\t\t\ton:click={() => buildMode = true}\n\t\t\tclass=\"{buildMode ? 'active' : ''}\"\n\t\t>\n\t\t</button>\n\t</div>\n\t<Griddler />\n\t<Buildler />\n</section>",
    "<script>\n  import Block from './Block.svelte';\n  import { hexColors } from './colors';\n\n  const MIN_SIZE = 2;\n  const MAX_SIZE = 8;\n\n  let size = 4;\n  let colors = ['#111'];\n  let colorIndex = 0;\n  let showColorPicker;\n  let colorToAdd;\n  let colorPicker;\n  let solutionState = Array(size).fill().map(() => Array(size).fill(0));\n  let solutionColor = Array(size).fill().map(() => Array(size).fill(null));\n\n  const updateSolution = () => {\n    if (size < MIN_SIZE) {\n      size = MIN_SIZE;\n    }\n\n    if (size > MAX_SIZE) {\n      size = MAX_SIZE;\n    }\n\n    solutionState = Array(size).fill().map(() => Array(size).fill(0))\n    solutionColor = Array(size).fill().map(() => Array(size).fill(null))\n  };\n\n  const toggleEnabled = (row, col) => {\n    solutionState[row][col] = !!solutionState[row][col] ? 0 : 1;\n    console.log(solutionState);\n    solutionColor[row][col] = !!solutionColor[row][col] ? null : colorIndex;\n    console.log(solutionColor);\n  };\n\n  const selectColor = index => colorIndex = index;\n  const updateColorToAdd = hex => colorToAdd = hex;\n  const toggleShowColorPicker = () => showColorPicker = true;\n\n  const valueToHex = (v, short = true) => {\n    const hex = v.toString(16);\n    hex = hex.length == 1 ? \"0\" + hex : hex;\n    return short ? hex[0] : hex;\n  }\n\n  const addColor = (hex) => {\n    colors.push(`#${hex}`);\n    colorIndex = colors.length - 1;\n    showColorPicker = false;\n  }\n</script>\n\n<style>\n  section {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    align-items: center;\n    margin: 0 auto;\n    width: 100%;\n    height: 100%;\n  }\n\n  input {\n    margin: 2rem auto 1rem;\n    width: 50px;\n  }\n\n  .board {\n    display: grid;\n    grid-gap: 0px;\n  } \n\n  .color-selector {\n    display: grid;\n    grid-gap: 0px;\n    grid-template-columns: repeat(16, 1fr);\n    margin: 0 auto;\n    width: 80%;\n  }\n\n  .color-option {\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n    margin: 2px;\n    border: 1px solid rgba(0, 0, 0, 0.5);\n    transition: all 0.2s ease-in-out;\n  }\n\n  .color-option:hover {\n    box-shadow: inset 0 0 2px rgba(255, 255, 255, 0.2);\n  }\n\n  .colors {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    height: 100%;\n    margin-bottom: 1rem;\n  }\n\n  .color {\n    align-items: center;\n    display: flex;\n    height: 32px;\n    justify-content: center;\n    width: 32px;\n    color: #eee;\n    font-size: 12px;\n    cursor: pointer;\n    margin: 2px;\n    transition: all 0.2s ease-in-out;\n    border-radius: 4px;\n  }\n\n  .color.active {\n    padding: 2px;\n    border: 2px solid black;\n  }\n\n  .color.add {\n    background: #ddd;\n    color: #333;\n  }\n</style>\n\n<section>\n  <input\n    bind:value={size}\n    on:change={updateSolution}\n    type=\"number\"\n    min=\"0\"\n  />\n</section>\n\n{#if showColorPicker}\n  <section class=\"color-selector\">\n    {#each hexColors as color}\n      <div\n        on:click={() => addColor(color)}\n        class=\"color-option\"\n        style=\"background: #{color};\"\n      />\n    {/each}\n  </section>\n{/if}\n\n<section>\n  <div class=\"colors\">\n    {#each colors as color, index}\n      <div\n        class=\"color {index === colorIndex && 'active'}\"\n        style=\"background: {color}\"\n        on:click={() => selectColor(index)}\n      >\n        {color}\n      </div>\n    {/each}\n    <div class=\"color add\" on:click={() => toggleShowColorPicker()}>\n      +\n    </div>\n  </div>\n</section>\n<section>\n  <div\n    class=\"board\"\n    style=\"grid-template-columns: repeat({size}, 1fr); grid-template-rows: repeat({size}, 1fr);\"\n  >\n    {#each solutionState as row, rowIndex}\n      {#each row as col, colIndex}\n        <Block\n          transitionTime={0.05}\n          state={col}\n          row={rowIndex}\n          col={colIndex}\n          onClick={() => toggleEnabled(rowIndex, colIndex)}\n          enabledColor={solutionColor[rowIndex][colIndex]}\n        >\n          {col}\n        </Block>\n      {/each}\n    {/each}\n  </div>\n</section>",
    "<script>\n  import Block from './Block.svelte';\n  import { generateTotals } from './utils';\n\n  export let level;\n\n  let layerIndex = 0;\n  $: title = level.title;\n  $: layers = level.layers;\n  $: colors = layers.map(layer => layer.color);\n  $: solutions = layers.map(layer => layer.solution);\n  $: boards = layers.map(layer => layer.board);\n  $: currentColor = colors[layerIndex];\n  $: currentSolution = solutions[layerIndex];\n  $: currentBoard = boards[layerIndex];\n  $: [rowTotals, colTotals] = generateTotals(currentSolution);\n  $: same = checkLayers(layers);\n\n  const setLayerIndex = index => { layerIndex = index; };\n\n  const toggleDisabled = (row, col) => (\n    currentBoard[row][col] = currentBoard[row][col] === -1 ? 0 : -1\n  );\n\n  const toggleEnabled = (row, col) => (\n    currentBoard[row][col] = currentBoard[row][col] === -1\n      ? 0\n      : (currentBoard[row][col] === 1 ? 0 : 1)\n  );\n\n  const checkLayers = (layers) => {\n    let same = true;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const solution = solutions[i];\n      const board = boards[i];\n\n      solution.forEach(\n        (solutionRow, rowIndex) => {\n          solutionRow.forEach(\n            (solutionColumn, columnIndex) => {\n              let guess = Math.max(board[rowIndex][columnIndex], 0);\n              if (solutionColumn !== guess) {\n                same = false;\n              }\n            }\n          )\n        }\n      )\n    }\n\n\t\treturn same;\n  }\n  \n</script>\n\n<style>\n  h1 {\n    font-size: 1.3rem;\n    text-transform: uppercase;\n    color: #222;\n  }\n\n  .flex-row {\n    display: flex;\n  }\n\n  .flex-col {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .justify-center {\n    justify-content: center;\n  }\n\n  .margin-bottom {\n    margin-bottom: 1rem;\n  }\n\n  .board {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    grid-gap: 0px;\n  }\n</style>\n\n<h1>{title}</h1>\n\n<div class=\"flex-row justify-center margin-bottom\">\n  {#each colors as color, index}\n    <Block\n      state={1}\n      enabledColor={color}\n      onClick={() => { setLayerIndex(index); }}\n    >\n      {color}\n    </Block>\n  {/each}\n</div>\n\n<div class=\"flex-row justify-center\">\n  {#each colTotals as total}\n    <Block\n      enabledColor={currentColor}\n      state={1}\n    >\n      {total}\n    </Block>\n  {/each}\n</div>\n\n<div class=\"flex-row justify-center\">\n  <div class=\"flex-col\">\n    {#each rowTotals as total}\n      <Block\n        enabledColor={currentColor}\n        state={1}\n      >\n        {total}\n      </Block>\n    {/each}\n  </div>\n  <div class=\"flex-row\">\n    <section class=\"board\">\n      {#each currentBoard as row, rowIndex}\n        {#each row as item, colIndex}\n          <Block\n            state={item}\n            row={rowIndex}\n            col={colIndex}\n            onClick={toggleEnabled}\n            onRightClick={toggleDisabled}\n            enabledColor={currentColor}\n          />\n        {/each}\n      {/each}\n    </section>\n  </div>\n  <div class=\"flex-col\">\n    {#each rowTotals as total}\n      <Block\n        enabledColor={currentColor}\n        state={1}\n      >\n        {total}\n      </Block>\n    {/each}\n  </div>\n</div>\n\n<div class=\"flex-row justify-center\">\n  {#each colTotals as total}\n    <Block\n      enabledColor={currentColor}\n      state={1}\n    >\n      {total}\n    </Block>\n  {/each}\n</div>\n\n<div class=\"flex-row justify-center\">\n  {same.toString()}\n</div>",
    "<script>\n  export let row;\n  export let col;\n  export let state = 0;\n  export let enabledColor;\n  export let onClick;\n  export let onRightClick;\n  export let transitionTime = 0.2;\n\n  const white = '#eee';\n  const black = '#111';\n  const red = '#d22';\n\n  console.log(enabledColor);\n  $: bg = state < 0 ? red : (state > 0 ? enabledColor : white);\n  $: textColor = bg === white ? black : white;\n\n</script>\n\n<style>\n  div {\n    align-items: center;\n    background: white;\n    border: 2px solid rgba(0, 0, 0, 0.4);\n    box-sizing: border-box;\n    cursor: pointer;\n    display: flex;\n    font-size: 14px;\n    height: 48px;\n    justify-content: center;\n    width: 48px;\n  }\n</style>\n\n<div\n  style=\"background: {bg}; color: {textColor}; transition: all {transitionTime}s ease-in-out;\"\n  on:click={() => {\n    if (onClick) {\n      onClick(row, col);\n    }\n  }}\n  on:contextmenu={(e) => {\n    if (onRightClick) {\n      e.preventDefault();\n      onRightClick(row, col);\n    }\n  }}\n>\n  <slot />\n</div>"
  ],
  "names": [],
  "mappings": "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"
}