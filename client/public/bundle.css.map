{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Griddler.svelte",
    "../src/Block.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import _ from 'lodash';\n  import { onMount } from 'svelte';\n\timport { slide } from 'svelte/transition';\n  import { quintOut } from 'svelte/easing';\n  import { gql } from 'apollo-boost';\n  import { matrix, deepEqual } from 'mathjs';\n\n  import { generateTotals } from './utils.ts';\n  import { client, Levels } from './gql';\n  import Block from './Block.svelte';\n\n  export let props = {};\n\n  let levels;\n  let boards;\n  let level;\n  let title;\n  let colors;\n  let solution;\n  let board;\n  let color;\n  let rowTotals, colTotals;\n\n  let levelIndex = 0;\n  let layerIndex = 0;\n  let same = false;\n\n  const resetBoard = (solution) => {\n    const width = solution[0].length;\n    const height = solution.length;\n    const _board = Array(width).fill().map(() => Array(height).fill(-1));\n    return _board;\n  }\n\n  const changeLevel = (d) => {\n    same = false;\n    levelIndex += d;\n    board = resetBoard(solution);\n  }\n\n  const setLayerIndex = index => { layerIndex = index; };\n\n  const toggleDisabled = (row, col) => (\n    board[row][col] = board[row][col] === -2\n      ? -1\n      : -2\n  );\n\n  const toggleEnabled = (row, col) => {\n    board[row][col] = board[row][col] === -1\n      ? layerIndex\n      : -1\n    same = deepEqual(matrix(solution), matrix(board));\n\n    if (same && levelIndex < levels.length) {\n      \n    }\n  };\n\n  onMount(async () => {\n    const resp = await client.query({ query: Levels });\n    debugger;\n    levels = resp.data.levels;\n    boards = levels.map(l => l.solution.map(r => r.map(c => -1)));\n    level = levels[levelIndex];\n    title = level.title;\n    colors = level.colors;\n    solution = level.solution;\n    board = boards[levelIndex];\n    color = colors[layerIndex];\n    [rowTotals, colTotals] = generateTotals(colors, solution)[layerIndex];\n\n  });\n</script>\n\n<style>\n  h1 {\n    color: #222;\n    font-size: 1.3rem;\n    text-align: center;\n    text-transform: uppercase;\n  }\n\n  .main {\n    background: '#fff';\n    padding: 2rem;\n  }\n\n  .flex-row {\n    display: flex;\n  }\n\n  .flex-col {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .justify-center {\n    justify-content: center;\n  }\n\n  .margin-bottom {\n    margin-bottom: 1rem;\n  }\n\n  .board {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    grid-template-rows: repeat(7, 1fr);\n    grid-gap: 0px;\n  }\n</style>\n\n<div class=\"main\">\n  <h1>{title}</h1>\n  <h2>Butts</h2>\n  {#if colors && !!colors.length}\n    <div class=\"flex-row justify-center margin-bottom\">\n      {#each colors as color, index}\n        <Block\n          state={1}\n          color={color}\n          onClick={() => { setLayerIndex(index); }}\n          styles=\"border-radius: 4px; margin: 0 4px;\"\n        >\n          {color}\n        </Block>\n      {/each}\n    </div>\n  {/if}\n  <div class=\"flex-row justify-center\">\n    {#if colTotals && !!colTotals.length}\n      <Block\n        color={color}\n        state={1}\n        styles=\"border-top-left-radius: 24px;\"\n      />\n      {#each colTotals as total}\n        <Block\n          color={color}\n          state={1}\n        >\n          {total}\n        </Block>\n      {/each}\n      <Block\n        color={color}\n        state={1}\n        styles=\"border-top-right-radius: 24px;\"\n      />\n    {/if}\n  </div>\n  <div class=\"flex-row justify-center\">\n    {#if rowTotals && !!rowTotals.length}\n      <div class=\"flex-col\">\n        {#each rowTotals as total}\n          <Block\n            color={color}\n            state={1}\n          >\n            {total}\n          </Block>\n        {/each}\n      </div>\n    {/if}\n    {#if boards && !!boards.length}\n      <div class=\"flex-row\">\n        <section class=\"board\">\n          {#each boards[levelIndex] as row, rowIndex}\n            {#each row as item, colIndex}\n              <Block\n                state={item}\n                row={rowIndex}\n                col={colIndex}\n                onClick={toggleEnabled}\n                onRightClick={toggleDisabled}\n                color={colors[item]}\n              />\n            {/each}\n          {/each}\n        </section>\n      </div>\n    {/if}\n    {#if rowTotals && !!rowTotals.length}\n      <div class=\"flex-col\">\n        {#each rowTotals as total}\n          <Block\n            color={color}\n            state={1}\n          >\n            {total}\n          </Block>\n        {/each}\n      </div>\n    {/if}\n  </div>\n  {#if colTotals && !!colTotals.length}\n    <div class=\"flex-row justify-center\">\n      <Block\n        color={color}\n        state={1}\n        styles=\"border-bottom-left-radius: 24px;\"\n      />\n      {#each colTotals as total}\n        <Block\n          color={color}\n          state={1}\n        >\n          {total}\n        </Block>\n      {/each}\n      <Block\n        color={color}\n        state={1}\n        styles=\"border-bottom-right-radius: 24px;\"\n      />\n    </div>\n  {/if}\n  <div class=\"flex-row justify-center\">\n    {same.toString()}\n  </div>\n</div>\n",
    "<script>\n  export let row;\n  export let col;\n  export let state = -1;\n  export let color;\n  export let onClick;\n  export let onRightClick;\n  export let transitionTime = 0.2;\n  export let styles;\n\n  const white = '#eee';\n  const black = '#111';\n  const red = '#d22';\n\n  $: bg = state === -2 ? red : (state === -1 ? white : color);\n  $: textColor = bg === white ? black : white;\n  $: _styles = `background: ${bg}; color: ${textColor}; transition: all ${transitionTime}s ease-in-out;`\n</script>\n\n<style>\n  div {\n    align-items: center;\n    background: white;\n    border: 1px solid rgba(0, 0, 0, 0.4);\n    box-sizing: border-box;\n    cursor: pointer;\n    display: flex;\n    font-size: 14px;\n    height: 48px;\n    justify-content: center;\n    width: 48px;\n  }\n</style>\n\n<div\n  style=\"{_styles}{styles}\"\n  on:click={() => {\n    if (onClick) {\n      onClick(row, col);\n    }\n  }}\n  on:contextmenu={(e) => {\n    if (onRightClick) {\n      e.preventDefault();\n      onRightClick(row, col);\n    }\n  }}\n>\n  <slot />\n</div>"
  ],
  "names": [],
  "mappings": "AA6EE,EAAE,cAAC,CAAC,AACF,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,MAAM,CACjB,UAAU,CAAE,MAAM,CAClB,cAAc,CAAE,SAAS,AAC3B,CAAC,AAED,KAAK,cAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,AACf,CAAC,AAED,SAAS,cAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,AACxB,CAAC,AAED,eAAe,cAAC,CAAC,AACf,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,cAAc,cAAC,CAAC,AACd,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CACrC,kBAAkB,CAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAClC,QAAQ,CAAE,GAAG,AACf,CAAC;AC3FD,GAAG,eAAC,CAAC,AACH,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,KAAK,CACjB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,UAAU,CAAE,UAAU,CACtB,MAAM,CAAE,OAAO,CACf,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,CACvB,KAAK,CAAE,IAAI,AACb,CAAC"
}